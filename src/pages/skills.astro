---
import { Icon } from "astro-icon";
import IconText from "../components/iconText.astro";
import Layout from "../layouts/default.astro";
---

<Layout title="Kilian Gosewisch" seoDesc="Who is Kilian Gosewisch?">
  <IconText icon="typescript">
    <span class="font-semibold">TypeScript</span> is awesome. I love it. I use it
    for everything that fits since the beginning of 2014. The tooling, the ecosystem,
    the community and the philosophy is what I like the most. I mostly combine it
    with jest, eslint, prettier and zod.
  </IconText>
  <IconText icon="nodejs">
    The good old <span class="font-semibold">Node.js</span>. It has it's flaws
    and quirks, but it's still the best right now IMHO. It's stable, fast and
    has a great ecosystem. If you know how to use it, it's a great tool to get
    things done on the web. Combine it with dotenv, nvm and other awesome tools
    and you got yourself a comfy environment.
  </IconText>
  <IconText icon="react">
    <span class="font-semibold">React.js</span>
    is my go-to frontend libary. I just like that it is not a framework which makes
    it very flexible. The community and the tooling around it are also big pluses.
    I gathered some experience around Vue and Svelte and am currently checking out
    solid.js to find a successor to react. For static page generation I really like
    astro. Static pages are still cool ;) Next.js is also my preferred extension
    to react in many cases.
  </IconText>
  <IconText icon="docker">
    I will never go back to a world without <span class="font-semibold"
      >Docker</span
    > and containers. I can only imagine a future without Docker where it was replaced
    by something even better. If it runs in Docker it runs everywhere. I love it.
    Pair it with Docker compose and automate your whole dev environment with a single
    command. On production Docker is the foundation for simple and complex apps.
    Use it standalone, with compose, swarm, kubernetes... You are spoiled for choice.
  </IconText>
  <IconText icon="githubactions">
    <span class="font-semibold">Git</span>. I've never used anything else. So i
    guess it's the best :P. GitHub, GitLab, etc... Irreplacable for a good
    gitOps workflow. Combined with a CI/CD like GitHub Actions or GitLabCI,
    sprinkle in some ansible or similar, setup sane rules for your repo and get
    rid of most human tasks which could result in mistakes. Because, you know,
    we are still humans.
  </IconText>
  <IconText icon="postgres">
    <span class="font-semibold">PostgresQL</span> is my go-to database if there are
    no special requirements. It's fast, stable, has a great community and is open
    source. I've used it for years and never had any problems. I also have great
    experience with automatic migration generation on postgres. IMHO it's a great
    database for small and big projects. MongoDB is almost always a no-go for me.
  </IconText>
  <div>
    <h1>Frontend</h1>
    <p>
      I'm not a specialised frontend developer or designer. But I have my fair
      share of experience in WebApp frontend development and really enjoy it. I
      started with <span class="font-semibold">AngularJS 1</span> and then switched
      to <span class="font-semibold">React.js</span> which mostly use to this day.
      I also layed hands on <span class="font-semibold">Vue.js</span> and <span
        class="font-semibold">Svelte.js</span
      > which go into a similar direction. I'm ok working on those but still prefer
      the library approach of <span class="font-semibold">React.js</span>.
      That's why I recently found interest in <span class="font-semibold"
        >solid.js</span
      >
      which is a library which feels like the successor to <span
        class="font-semibold">React.js</span
      > to me.
    </p>
    <p>
      In my free time I like to play around with new technologies and tried out
      <span class="font-semibold">Astro</span> to replace the aging website of my
      mothers business <a href="https://cgosewisch.de" target="_blank"
        >cgosewisch.de</a
      >
      It was a great experience and I'm looking forward to use it more in the future.
      This website is also built with <span class="font-semibold">Astro</span> inspired
      by my previous experiences with it.
    </p>
    <p>
      For CSS I used many preprocessors like <span class="font-semibold"
        >SASS</span
      >, <span class="font-semibold">LESS</span>, <span class="font-semibold"
        >PostCSS</span
      > and
      <span class="font-semibold">styledComponents</span> but now settled onto <span
        class="font-semibold">TailwindCSS</span
      > which completes my frontend stack. Community, tooling and philosophy are
      what made me switch.
    </p>
  </div>
  <div>
    <h1>Backend</h1>
    <p>
      Ahh yes. The backend. The thing that connects to databases, does awesome
      calculations, verifies everything, handles all the traffic, should be rock
      solid, scalable and maintainable. Or as other people call it: boring! Each
      to their own. I actually really enjoy thinking about all this stuff and
      how it interconnects etc.
    </p><p>
      It's always a challenge I really enjoy to find and keep a great balance
      between optimization, readability and velocity of the backend code. If you
      do it right it will be fun to work on it AND run it.
    </p>
    <p>
      Talking about fun. It does not need to be fun, but it should not be hell
      to talk to your backend. A good documentation WITH EXAMPLES should be
      provided and kept up to date. Autogenerate where you can to eliminate
      human processes once again. The error messages should be helpful and not
      just some cryptic text to you or the user.
    </p>
    <p>
      It is important to balance the level of abstraction in your backend code
      to be able to move fast but also have a minimum amount of stability. I
      mostly achieve this with verification libraries like <span
        class="font-semibold">Zod</span
      > and unit tests. If your code is smelly somewhere it will be hard or awkward
      to test. Great opportunity to refactor. But beware, premature optimization
      is always behind the next corner.
    </p>
    <p>
      <span class="font-semibold">TypeScript</span> with <span
        class="font-semibold">Node.js</span
      > is my foundation which I always use because I believe it is a good combination
      to achieve what i just described.
    </p>
  </div>
  <div>
    <h1>Git, CI, CD, Ops</h1>
    <p>
      Git, never used something else. Did I miss anything? I don't think so,
      yet.
    </p>
    <p>
      In my workflow, the Git repo is the single source of truth. For the code,
      for the infrastructure, etc. The pipeline always begins with an event in
      Git. If the developers don't use GitHub or GitLab issues there should be a
      system connected to your Git repo to keep the tickets in sync with the
      pull/merge request states. This way you can always see what is going on in
      a ticket even though developers mostly work in Git.
    </p>
    <p>
      The CI/CD pipeline should be as automated as possible. If you have to
      manually trigger a pipeline, you are doing it wrong. The pipeline should
      be triggered by a push to a branch or a pull/merge request. This way you
      can automate the whole process of development, testing, deployment and
      closing the ticket. It is also great for piece of mind. You can always see
      if all of your code and tests are working. Testers and stakeholders can
      chime in and play around in the pull/merge request environment which is
      automatically created and dropped. Now you just need a review from another
      developer and you can be pretty shure that your code is good to go.
      Releasing should not create fear. It should be a simple process which is
      automated and can be done anytime. So even if a bug got into production
      just deploy the fix 5mins later.
    </p>
  </div>
</Layout>
